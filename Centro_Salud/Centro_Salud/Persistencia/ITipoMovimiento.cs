///////////////////////////////////////////////////////////
//  TipoMovimiento.cs
//  Implementation of the Class Lote
//  Generated by Enterprise Architect
//  Created on:      14-ene-2014 21:36:21
///////////////////////////////////////////////////////////

using System;
using Centro_Salud.Persistencia;
using Centro_Salud;
using System.Collections.Generic;
using Centro_Salud.Presentacion;
using System.Linq;

namespace Centro_Salud.Persistencia
{
    public class ITipoMovimiento : Intermediario
    {

        private int codigoTipoMov;
        private String descripcionTipoMov;
        private String tipo;

        
        public ITipoMovimiento()
        {

        }

        ~ITipoMovimiento()
        {

        }

        public virtual void Dispose()
        {

        }

        public override void save<T>(T entity)
        {
            try
            {
                TipoMovimiento tipomovimiento = entity as TipoMovimiento;

                dao.TipoMovimientos.InsertOnSubmit(tipomovimiento);

            }
            catch (Exception ex)
            {
                throw new Exception("Error al guardar" + ex.Message);
            }

        }

        public override void Delete(int id)
        {
            throw new NotImplementedException();
        }
        public override void Update<T>(T entity)
        {
            throw new NotImplementedException();
        }
        public override List<T> getByCriterio<T>(string att, string op, string val)
        {
            return (from l in dao.TipoMovimientos where l.codigoTipoMov == Convert.ToInt32(val) select l).ToList() as List<T>;
            //throw new NotImplementedException();
        }
        public override IList<T> getPorCriterio<T>(string name)
        {
          return (from tipomovimiento  in dao.TipoMovimientos where tipomovimiento.descripcionTipoMov == name select tipomovimiento).ToList() as List<T>; //.SingleOrDefault() as List<T>; //retorna un solo Producto
        }

        public override object getPorId(int id)
        {
            throw new NotImplementedException();
        }
        public override IList<T> getCriterioById<T>(string att, string op, int val)
        {
            throw new NotImplementedException();
        }
        public override List<T> getAll<T>()
        {
            return (from tipomovimiento in dao.TipoMovimientos select tipomovimiento).ToList() as List<T>;
        }




    }//end Lote
}