///////////////////////////////////////////////////////////
//  Especialidad.cs
//  Implementation of the Class Especialidad
//  Generated by Enterprise Architect
//  Created on:      14-ene-2014 21:36:21
///////////////////////////////////////////////////////////

using System;
using Centro_Salud.Persistencia;
using Centro_Salud;
using System.Collections.Generic;
using Centro_Salud.Presentacion;
using System.Linq;


public class IEspecialidad:Intermediario {

	private int añosEspecialidad;
	private int codigoEspecialidad;
	private int complejidad;
	private string descripcionEspecialidad;
    private DateTime fechaBaja;
	public IUsuario m_Usuario;

	public IEspecialidad(){

	}

	~IEspecialidad(){

	}

    public override void save<T>(T entity){
      try
        {
            Especialidad es = entity as Especialidad;
            dao.Especialidads.InsertOnSubmit(es);
      
         
        }
        catch (Exception ex)
        {
            throw new Exception("Error al guardar" + ex.Message);
        }
    
    }

	public virtual void Dispose(){

	}

    public override void Delete(int id)
    {
        try
        {
            var es = (from e in dao.Especialidads where e.codigoEspecialidad == id select e).SingleOrDefault();

            if (es != null)
            {
               // es.Activo = false;
                es.fechaBaja = DateTime.Today.Date;
             //  dao.Especialidads.DeleteAllOnSubmit(es);
                
               dao.SubmitChanges();
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    public override void Update<T>(T entity)
    {
        try
        {
            dao.SubmitChanges();
           // dao.Refresh();

        }
        catch (Exception ex)
        {
            throw new Exception("Error al guardar" + ex.Message);
        }

    }
    public override List<T> getByCriterio<T>(string att, string op, string val)
    {
        throw new NotImplementedException();
    }
    public override IList<T> getPorCriterio<T>(string name)
    {
        
        return (from es in dao.Especialidads where (es.descripcionEspecialidad == name && es.fechaBaja==null) select es).ToList() as List<T>; //.SingleOrDefault() as List<T>; //retorna un solo Producto
    }

    public override object getPorId(int id)
    {
        return (from es in dao.Especialidads where es.codigoEspecialidad==id select es);
        //throw new NotImplementedException();
    }
    public override IList<T> getCriterioById<T>(string att, string op, int val)
    {
        throw new NotImplementedException();
    }
    public override List<T> getAll<T>()
    {
        return (from es in dao.Especialidads select es).ToList() as List<T>;
    }


}//end Especialidad